# run mongo database from cmd
mongod

# however, on windows, it will be started as service at system boot automatically

# run mongo client from another cmd
mongo

# mongo client commands:

# clear screen
> cls

> show dbs
admin       0.000GB
config      0.000GB
flightmgmt  0.000GB
local       0.000GB

#####################

# youtube demo
# database -> collections -> documents 

# database
> use mylib
switched to db mylib

# books - collection
# json - document
> db.books.insert({"name":"mongodb book"})
WriteResult({ "nInserted" : 1 })

> show dbs
admin       0.000GB
config      0.000GB
flightmgmt  0.000GB
local       0.000GB
mylib       0.000GB

> show collections
books

> db.books.find()
{ "_id" : ObjectId("60c3d287ccc13c5b49d21253"), "name" : "mongodb book" }

#####################

# udemy course

> use shop
switched to db shop

> db.products.insertOne({name: "A Book", price:12.99})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("60c53786d24694398ba828d7")
}

> db.products.find()
{ "_id" : ObjectId("60c53786d24694398ba828d7"), "name" : "A Book", "price" : 12.99 }

> db.products.find().pretty()
{
        "_id" : ObjectId("60c53786d24694398ba828d7"),
        "name" : "A Book",
        "price" : 12.99
}

> db.products.insertOne({name: "Guitar", price:158.2, description:"an electric guitar"})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("60c5386dd24694398ba828d8")
}

> db.products.find().pretty()
{
        "_id" : ObjectId("60c53786d24694398ba828d7"),
        "name" : "A Book",
        "price" : 12.99
}
{
        "_id" : ObjectId("60c5386dd24694398ba828d8"),
        "name" : "Guitar",
        "price" : 158.2,
        "description" : "an electric guitar"
}


> db.products.insertOne({name: "T-Shirt", price:29.0, description:"this is a high quality T-Shirt"})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("60c538f4d24694398ba828d9")
}

> db.products.find().pretty()
{
        "_id" : ObjectId("60c53786d24694398ba828d7"),
        "name" : "A Book",
        "price" : 12.99
}
{
        "_id" : ObjectId("60c5386dd24694398ba828d8"),
        "name" : "Guitar",
        "price" : 158.2,
        "description" : "an electric guitar"
}
{
        "_id" : ObjectId("60c538f4d24694398ba828d9"),
        "name" : "T-Shirt",
        "price" : 29,
        "description" : "this is a high quality T-Shirt"
}


> db.products.insertOne({name: "Computer", price:1231.99, description:"this is a high quality computer", details: {cpu: "Intel i7 8770", memory: 32}})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("60c53987d24694398ba828da")
}

> db.products.find().pretty()
{
        "_id" : ObjectId("60c53786d24694398ba828d7"),
        "name" : "A Book",
        "price" : 12.99
}
{
        "_id" : ObjectId("60c5386dd24694398ba828d8"),
        "name" : "Guitar",
        "price" : 158.2,
        "description" : "an electric guitar"
}
{
        "_id" : ObjectId("60c538f4d24694398ba828d9"),
        "name" : "T-Shirt",
        "price" : 29,
        "description" : "this is a high quality T-Shirt"
}
{
        "_id" : ObjectId("60c53987d24694398ba828da"),
        "name" : "Computer",
        "price" : 1231.99,
        "description" : "this is a high quality computer",
        "details" : {
                "cpu" : "Intel i7 8770",
                "memory" : 32
        }
}

================================

###################
# Basics
###################

- start mongod on different port than default 27017
mongod --port 27018
mongo --port 27018

- json always contain keys in double quotes, 
- however, in mongodb insert commands, we can use keys without quotes 
- behind the scenes, mongodb uses binary BSON to store

> use flights
switched to db flights

> db.flightData.insertOne({
...     "departureAirport": "MUC",
...     "arrivalAirport": "SFO",
...     "aircraft": "Airbus A380",
...     "distance": 12000,
...     "intercontinental": true
...   })
{
        "acknowledged" : true,
        "insertedId" : ObjectId("60ca7eb403d6d26b62b1c16c")
}

> db.flightData.find().pretty()
{
        "_id" : ObjectId("60ca7eb403d6d26b62b1c16c"),
        "departureAirport" : "MUC",
        "arrivalAirport" : "SFO",
        "aircraft" : "Airbus A380",
        "distance" : 12000,
        "intercontinental" : true
}

- _id is unique for each document
- if try to insert 2 documents with same _id, error will be thrown


###################
# CRUD operations
###################

# Create
insertOne(data, options)
insertMany(data, options)

# Read
find(filter, options)
findOne(filter, options)

# Update
updateOne(filter, data, options)
updateMany(filter, data, options)
replaceOne(filter, data, options)

# Delete
deleteOne(filter, options)
deleteMany(filter, options)


=========

> db.flightData.insertOne({"departureAirport": "TXL", "arrivalAirport": "LHR"})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("60cbd46002605fb7c8cf41f7")
}

> db.flightData.insertOne({"departureAirport": "TXL", "arrivalAirport": "LHR", _id:"txl-lhr-1"})
{ "acknowledged" : true, "insertedId" : "txl-lhr-1" }

> db.flightData.find().pretty()
{
        "_id" : ObjectId("60ca7eb403d6d26b62b1c16c"),
        "departureAirport" : "MUC",
        "arrivalAirport" : "SFO",
        "aircraft" : "Airbus A380",
        "distance" : 12000,
        "intercontinental" : true
}
{
        "_id" : ObjectId("60cbd46002605fb7c8cf41f7"),
        "departureAirport" : "TXL",
        "arrivalAirport" : "LHR"
}
{
        "_id" : "txl-lhr-1",
        "departureAirport" : "TXL",
        "arrivalAirport" : "LHR"
}

==============

## delete or update the documents

> db.flightData.deleteOne({"departureAirport" : "TXL"})
{ "acknowledged" : true, "deletedCount" : 1 }

> db.flightData.updateOne({"distance" : 12000}, {$set: {marker: "delete"}})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }

> db.flightData.updateMany({}, {$set: {marker: "toDelete"}})
{ "acknowledged" : true, "matchedCount" : 2, "modifiedCount" : 2 }

> db.flightData.deleteMany({marker: "toDelete"})
{ "acknowledged" : true, "deletedCount" : 2 }

============

# insertMany()

- multiple documents should be as an array - [ {}, {}..... ]

> db.flightData.insertMany([
...   {
...     "departureAirport": "MUC",
...     "arrivalAirport": "SFO",
...     "aircraft": "Airbus A380",
...     "distance": 12000,
...     "intercontinental": true
...   },
...   {
...     "departureAirport": "LHR",
...     "arrivalAirport": "TXL",
...     "aircraft": "Airbus A320",
...     "distance": 950,
...     "intercontinental": false
...   }
... ])
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("60ce7a27be69cbf3e681005f"),
                ObjectId("60ce7a27be69cbf3e6810060")
        ]
}

===============

# find()

- find can be used without any filter as argument or with it

> db.flightData.find()
> db.flightData.find().pretty()
> db.flightData.find().pretty()
> db.flightData.find({intercontinental: true}).pretty()
{
        "_id" : ObjectId("60ce7a27be69cbf3e681005f"),
        "departureAirport" : "MUC",
        "arrivalAirport" : "SFO",
        "aircraft" : "Airbus A380",
        "distance" : 12000,
        "intercontinental" : true
}

- number greater than condition
> db.flightData.find({distance: {$gt: 1000}}).pretty()
{
        "_id" : ObjectId("60ce7a27be69cbf3e681005f"),
        "departureAirport" : "MUC",
        "arrivalAirport" : "SFO",
        "aircraft" : "Airbus A380",
        "distance" : 12000,
        "intercontinental" : true
}

- pretty() is not supported for findOne() because output is already pretty
> db.flightData.findOne({distance: {$gt: 900}})
{
        "_id" : ObjectId("60ce7a27be69cbf3e681005f"),
        "departureAirport" : "MUC",
        "arrivalAirport" : "SFO",
        "aircraft" : "Airbus A380",
        "distance" : 12000,
        "intercontinental" : true
}

==============

# update() and updateMany()

update() works similar to updateOne() and updateMany()
- however, if $set is not used, then one and many will give error
- but update will replace the whole document with only the updated document provided

example:

> db.flightData.find().pretty()
{
        "_id" : ObjectId("60ce7a27be69cbf3e681005f"),
        "departureAirport" : "MUC",
        "arrivalAirport" : "SFO",
        "aircraft" : "Airbus A380",
        "distance" : 12000,
        "intercontinental" : true,
        "delayed" : false
}
{
        "_id" : ObjectId("60ce7a27be69cbf3e6810060"),
        "departureAirport" : "LHR",
        "arrivalAirport" : "TXL",
        "aircraft" : "Airbus A320",
        "distance" : 950,
        "intercontinental" : false
}

> db.flightData.updateOne({_id:  ObjectId("60ce7a27be69cbf3e681005f")}, {delayed: false})
uncaught exception: Error: the update operation document must contain atomic operators :
DBCollection.prototype.updateOne@src/mongo/shell/crud_api.js:565:19
@(shell):1:1

> db.flightData.updateMany({_id:  ObjectId("60ce7a27be69cbf3e681005f")}, {delayed: false})
uncaught exception: Error: the update operation document must contain atomic operators :
DBCollection.prototype.updateMany@src/mongo/shell/crud_api.js:655:19
@(shell):1:1

> db.flightData.update({_id:  ObjectId("60ce7a27be69cbf3e681005f")}, {delayed: false})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

> db.flightData.find().pretty()
{ "_id" : ObjectId("60ce7a27be69cbf3e681005f"), "delayed" : false }
{
        "_id" : ObjectId("60ce7a27be69cbf3e6810060"),
        "departureAirport" : "LHR",
        "arrivalAirport" : "TXL",
        "aircraft" : "Airbus A320",
        "distance" : 950,
        "intercontinental" : false
}

- better not to use update() and use replaceOne() for replacing the whole document
- for partial changes, use updateOne or updateMany

> db.flightData.replaceOne({_id:  ObjectId("60ce7a27be69cbf3e681005f")}, {
...     "departureAirport": "MUC",
...     "arrivalAirport": "SFO",
...     "aircraft": "Airbus A380",
...     "distance": 12000,
...     "intercontinental": true
...   })
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.flightData.find().pretty()
{
        "_id" : ObjectId("60ce7a27be69cbf3e681005f"),
        "departureAirport" : "MUC",
        "arrivalAirport" : "SFO",
        "aircraft" : "Airbus A380",
        "distance" : 12000,
        "intercontinental" : true
}
{
        "_id" : ObjectId("60ce7a27be69cbf3e6810060"),
        "departureAirport" : "LHR",
        "arrivalAirport" : "TXL",
        "aircraft" : "Airbus A320",
        "distance" : 950,
        "intercontinental" : false
}


#############################
# find() and the cursor object
#############################

- find() doesn't return all the data in the collection because data can be huge
- instead it returns a cursor object, can use "it" to fetch more data in cycles

- to get all the data at once, use toArray()
> db.passengers.find().toArray()

- can use forEach() for each document operation, its better for performance
> db.passengers.find().forEach((passengerData) => {printjson(passengerData)})

- pretty() is only available on cursor object got from find(), thus fails for findOne() which does not returns cursor
> db.passengers.findOne().pretty()
uncaught exception: TypeError: db.passengers.findOne(...).pretty is not a function :
@(shell):1:1


#############
# projection
#############

- when we only want a subset of document to be returned from find()
- example:
> db.passengers.find({},{name:1}).pretty()

- _id is always included
- to exlude _id explicitly
> db.passengers.find({},{name:1, _id:0}).pretty()
 
- filtering is done at mongod server side, so network bandwidth is saved








