###############
# Introduction
###############
- nosql database - meaning data can be inserted with no schema or relations (joins)
- concept of server (mongod) and client (mongo)
- can have many databases -> each database can have many collections (tables) -> each collections can have many documents (records/rows)
- documents can have any fields in a collection


#####################
# Installing MongoDB
#####################

## Windows
- for Community server: use msi and then click Download
https://www.mongodb.com/try/download/community

- install MongoD as a Service
search Services from windows search -> then make the MongoDB Server to run automatically when Windows starts

- Service name = MongoDB
- alternatively, to stop from command prompt
launch cmd as admin -> run command = "net stop MongoDB"
start command = "net start MongoDB"

- data and log directory:
C:\Program Files\MongoDB\Server\4.4\data
C:\Program Files\MongoDB\Server\4.4\log

- mongo client is present in (double clicking it will launch the client)
C:\Program Files\MongoDB\Server\4.4\bin\mongo.exe

- if bin is added to the PATH, then can run commands from cmd directly to start / stop server and client


## Install MongoDB shell
- alternative to legacy mongo client (installed by default), we can also install new shell
https://www.mongodb.com/try/download/shell

- install at
C:\Users\rishi\AppData\Local\Programs\mongosh\

- copy the 2 files to mongo bin directory as its already in PATH
mongosh.exe
mongocryptd-mongosh.exe


## basic commands

# run mongo database from cmd
mongod

# however, on windows, it will be started as service at system boot automatically

# run mongo client from another cmd
mongo

# mongo client commands:

# clear screen
> cls

> show dbs
admin       0.000GB
config      0.000GB
flightmgmt  0.000GB
local       0.000GB

# to create a new database and use it at same time, just run command: "use <database-name>"
> use shop
switched to db shop

# similarly to create a new collection (say, "products") and use it (insert records):
> db.products.insertOne({name: "Guitar", price: 100.99})

# use quit() to close mongo cmd prompt
> quit()


## Install mongoimport
- used to import some prepared data into a MongoDB database
https://docs.mongodb.com/database-tools/installation/installation/
https://docs.mongodb.com/database-tools/installation/installation-windows/

- other tools are also added and add bin to PATH
C:\Program Files\MongoDB\Tools\100\bin\


## use drivers
- use Java client to interact with mongod server
https://docs.mongodb.com/drivers/java-drivers/


## whole diagram                                                  Queries
frontend UI -> Backend (server) -> Drivers (Java/Python/Node.js)  =======  MongoDB Server <-> Storage Engine <-> DB (slow) or memory (fast)
                                      or
                                   MongoDB Shell


#####################

# youtube demo
# database -> collections -> documents

# database
> use mylib
switched to db mylib

# books - collection
# json - document
> db.books.insert({"name":"mongodb book"})
WriteResult({ "nInserted" : 1 })

> show dbs
admin       0.000GB
config      0.000GB
flightmgmt  0.000GB
local       0.000GB
mylib       0.000GB

> show collections
books

> db.books.find()
{ "_id" : ObjectId("60c3d287ccc13c5b49d21253"), "name" : "mongodb book" }

#####################

## Course

> use shop
switched to db shop

> db.products.insertOne({name: "A Book", price:12.99})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("60c53786d24694398ba828d7")
}

> db.products.find()
{ "_id" : ObjectId("60c53786d24694398ba828d7"), "name" : "A Book", "price" : 12.99 }

> db.products.find().pretty()
{
        "_id" : ObjectId("60c53786d24694398ba828d7"),
        "name" : "A Book",
        "price" : 12.99
}

> db.products.insertOne({name: "Guitar", price:158.2, description:"an electric guitar"})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("60c5386dd24694398ba828d8")
}

> db.products.find().pretty()
{
        "_id" : ObjectId("60c53786d24694398ba828d7"),
        "name" : "A Book",
        "price" : 12.99
}
{
        "_id" : ObjectId("60c5386dd24694398ba828d8"),
        "name" : "Guitar",
        "price" : 158.2,
        "description" : "an electric guitar"
}


> db.products.insertOne({name: "T-Shirt", price:29.0, description:"this is a high quality T-Shirt"})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("60c538f4d24694398ba828d9")
}

> db.products.find().pretty()
{
        "_id" : ObjectId("60c53786d24694398ba828d7"),
        "name" : "A Book",
        "price" : 12.99
}
{
        "_id" : ObjectId("60c5386dd24694398ba828d8"),
        "name" : "Guitar",
        "price" : 158.2,
        "description" : "an electric guitar"
}
{
        "_id" : ObjectId("60c538f4d24694398ba828d9"),
        "name" : "T-Shirt",
        "price" : 29,
        "description" : "this is a high quality T-Shirt"
}


> db.products.insertOne({name: "Computer", price:1231.99, description:"this is a high quality computer", details: {cpu: "Intel i7 8770", memory: 32}})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("60c53987d24694398ba828da")
}

> db.products.find().pretty()
{
        "_id" : ObjectId("60c53786d24694398ba828d7"),
        "name" : "A Book",
        "price" : 12.99
}
{
        "_id" : ObjectId("60c5386dd24694398ba828d8"),
        "name" : "Guitar",
        "price" : 158.2,
        "description" : "an electric guitar"
}
{
        "_id" : ObjectId("60c538f4d24694398ba828d9"),
        "name" : "T-Shirt",
        "price" : 29,
        "description" : "this is a high quality T-Shirt"
}
{
        "_id" : ObjectId("60c53987d24694398ba828da"),
        "name" : "Computer",
        "price" : 1231.99,
        "description" : "this is a high quality computer",
        "details" : {
                "cpu" : "Intel i7 8770",
                "memory" : 32
        }
}

================================

###################
# Basics
###################

- start mongod on different port than default 27017
mongod --port 27018
mongo --port 27018

- json always contain keys in double quotes,
- however, in mongodb insert commands, we can use keys without quotes
- behind the scenes, mongodb uses binary BSON to store

> use flights
switched to db flights

> db.flightData.insertOne({
...     "departureAirport": "MUC",
...     "arrivalAirport": "SFO",
...     "aircraft": "Airbus A380",
...     "distance": 12000,
...     "intercontinental": true
...   })
{
        "acknowledged" : true,
        "insertedId" : ObjectId("60ca7eb403d6d26b62b1c16c")
}

> db.flightData.find().pretty()
{
        "_id" : ObjectId("60ca7eb403d6d26b62b1c16c"),
        "departureAirport" : "MUC",
        "arrivalAirport" : "SFO",
        "aircraft" : "Airbus A380",
        "distance" : 12000,
        "intercontinental" : true
}

- _id is unique for each document
- if try to insert 2 documents with same _id, error will be thrown


###################
# CRUD operations
###################

# Create
insertOne(data, options)
insertMany(data, options)

# Read
find(filter, options)
findOne(filter, options)

# Update
updateOne(filter, data, options)
updateMany(filter, data, options)
replaceOne(filter, data, options)

# Delete
deleteOne(filter, options)
deleteMany(filter, options)


=========

> db.flightData.insertOne({"departureAirport": "TXL", "arrivalAirport": "LHR"})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("60cbd46002605fb7c8cf41f7")
}

> db.flightData.insertOne({"departureAirport": "TXL", "arrivalAirport": "LHR", _id:"txl-lhr-1"})
{ "acknowledged" : true, "insertedId" : "txl-lhr-1" }

> db.flightData.find().pretty()
{
        "_id" : ObjectId("60ca7eb403d6d26b62b1c16c"),
        "departureAirport" : "MUC",
        "arrivalAirport" : "SFO",
        "aircraft" : "Airbus A380",
        "distance" : 12000,
        "intercontinental" : true
}
{
        "_id" : ObjectId("60cbd46002605fb7c8cf41f7"),
        "departureAirport" : "TXL",
        "arrivalAirport" : "LHR"
}
{
        "_id" : "txl-lhr-1",
        "departureAirport" : "TXL",
        "arrivalAirport" : "LHR"
}

==============

## delete or update the documents

> db.flightData.deleteOne({"departureAirport" : "TXL"})
{ "acknowledged" : true, "deletedCount" : 1 }

> db.flightData.updateOne({"distance" : 12000}, {$set: {marker: "delete"}})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }

> db.flightData.updateMany({}, {$set: {marker: "toDelete"}})
{ "acknowledged" : true, "matchedCount" : 2, "modifiedCount" : 2 }

> db.flightData.deleteMany({marker: "toDelete"})
{ "acknowledged" : true, "deletedCount" : 2 }

============

# insertMany()

- multiple documents MUST be inserted as an array - [ {}, {}..... ]

> db.flightData.insertMany([
...   {
...     "departureAirport": "MUC",
...     "arrivalAirport": "SFO",
...     "aircraft": "Airbus A380",
...     "distance": 12000,
...     "intercontinental": true
...   },
...   {
...     "departureAirport": "LHR",
...     "arrivalAirport": "TXL",
...     "aircraft": "Airbus A320",
...     "distance": 950,
...     "intercontinental": false
...   }
... ])
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("60ce7a27be69cbf3e681005f"),
                ObjectId("60ce7a27be69cbf3e6810060")
        ]
}

===============

# find()

- find can be used without any filter as argument or with it

> db.flightData.find()
> db.flightData.find().pretty()
> db.flightData.find().pretty()
> db.flightData.find({intercontinental: true}).pretty()
{
        "_id" : ObjectId("60ce7a27be69cbf3e681005f"),
        "departureAirport" : "MUC",
        "arrivalAirport" : "SFO",
        "aircraft" : "Airbus A380",
        "distance" : 12000,
        "intercontinental" : true
}

- number greater than condition
> db.flightData.find({distance: {$gt: 1000}}).pretty()
{
        "_id" : ObjectId("60ce7a27be69cbf3e681005f"),
        "departureAirport" : "MUC",
        "arrivalAirport" : "SFO",
        "aircraft" : "Airbus A380",
        "distance" : 12000,
        "intercontinental" : true
}

- pretty() is not supported for findOne() because output is already pretty
> db.flightData.findOne({distance: {$gt: 900}})
{
        "_id" : ObjectId("60ce7a27be69cbf3e681005f"),
        "departureAirport" : "MUC",
        "arrivalAirport" : "SFO",
        "aircraft" : "Airbus A380",
        "distance" : 12000,
        "intercontinental" : true
}

==============

# update() and updateMany()

update() works similar to updateOne() and updateMany()
- however, if $set is not used, then one and many will give error
- but update will replace the whole document with only the updated document provided

example:

> db.flightData.find().pretty()
{
        "_id" : ObjectId("60ce7a27be69cbf3e681005f"),
        "departureAirport" : "MUC",
        "arrivalAirport" : "SFO",
        "aircraft" : "Airbus A380",
        "distance" : 12000,
        "intercontinental" : true,
        "delayed" : false
}
{
        "_id" : ObjectId("60ce7a27be69cbf3e6810060"),
        "departureAirport" : "LHR",
        "arrivalAirport" : "TXL",
        "aircraft" : "Airbus A320",
        "distance" : 950,
        "intercontinental" : false
}

> db.flightData.updateOne({_id:  ObjectId("60ce7a27be69cbf3e681005f")}, {delayed: false})
uncaught exception: Error: the update operation document must contain atomic operators :
DBCollection.prototype.updateOne@src/mongo/shell/crud_api.js:565:19
@(shell):1:1

> db.flightData.updateMany({_id:  ObjectId("60ce7a27be69cbf3e681005f")}, {delayed: false})
uncaught exception: Error: the update operation document must contain atomic operators :
DBCollection.prototype.updateMany@src/mongo/shell/crud_api.js:655:19
@(shell):1:1

> db.flightData.update({_id:  ObjectId("60ce7a27be69cbf3e681005f")}, {delayed: false})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

> db.flightData.find().pretty()
{ "_id" : ObjectId("60ce7a27be69cbf3e681005f"), "delayed" : false }
{
        "_id" : ObjectId("60ce7a27be69cbf3e6810060"),
        "departureAirport" : "LHR",
        "arrivalAirport" : "TXL",
        "aircraft" : "Airbus A320",
        "distance" : 950,
        "intercontinental" : false
}

- better not to use update() and use replaceOne() for replacing the whole document
- for partial changes, use updateOne or updateMany

> db.flightData.replaceOne({_id:  ObjectId("60ce7a27be69cbf3e681005f")}, {
...     "departureAirport": "MUC",
...     "arrivalAirport": "SFO",
...     "aircraft": "Airbus A380",
...     "distance": 12000,
...     "intercontinental": true
...   })
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }

> db.flightData.find().pretty()
{
        "_id" : ObjectId("60ce7a27be69cbf3e681005f"),
        "departureAirport" : "MUC",
        "arrivalAirport" : "SFO",
        "aircraft" : "Airbus A380",
        "distance" : 12000,
        "intercontinental" : true
}
{
        "_id" : ObjectId("60ce7a27be69cbf3e6810060"),
        "departureAirport" : "LHR",
        "arrivalAirport" : "TXL",
        "aircraft" : "Airbus A320",
        "distance" : 950,
        "intercontinental" : false
}


#############################
# find() and the cursor object
#############################

- find() doesn't return all the data in the collection because data can be huge
- instead it returns a cursor object, can use "it" to fetch more data in cycles

- to get all the data at once, use toArray()
> db.passengers.find().toArray()

- can use forEach() for each document operation, its better for performance
> db.passengers.find().forEach((passengerData) => {printjson(passengerData)})

- pretty() is only available on cursor object got from find(), thus fails for findOne() which does not returns cursor
> db.passengers.findOne().pretty()
uncaught exception: TypeError: db.passengers.findOne(...).pretty is not a function :
@(shell):1:1


#############
# projection
#############

- when we only want a subset of document to be returned from find()
- example:
> db.passengers.find({},{name:1}).pretty()

- _id is always included
- to exlude _id explicitly
> db.passengers.find({},{name:1, _id:0}).pretty()

- filtering is done at mongod server side, so network bandwidth is saved

#############
# embedded documents
# arrays
#############

- value can have many nested documents
- upto 100 level of nesting - hard limit
- max 16MB per document

ex:
> db.flightData.updateMany({}, {$set: {status: {description: "on-time", lastUpdated: "1 hour ago", details: {responsible: "Rishi Srivastava"}}}})
{ "acknowledged" : true, "matchedCount" : 2, "modifiedCount" : 2 }

> db.flightData.find().pretty()
{
        "_id" : ObjectId("60ce7a27be69cbf3e681005f"),
        "departureAirport" : "MUC",
        "arrivalAirport" : "SFO",
        "aircraft" : "Airbus A380",
        "distance" : 12000,
        "intercontinental" : true,
        "status" : {
                "description" : "on-time",
                "lastUpdated" : "1 hour ago",
                "details" : {
                        "responsible" : "Rishi Srivastava"
                }
        }
}
{
        "_id" : ObjectId("60ce7a27be69cbf3e6810060"),
        "departureAirport" : "LHR",
        "arrivalAirport" : "TXL",
        "aircraft" : "Airbus A320",
        "distance" : 950,
        "intercontinental" : false,
        "status" : {
                "description" : "on-time",
                "lastUpdated" : "1 hour ago",
                "details" : {
                        "responsible" : "Rishi Srivastava"
                }
        }
}

---------------
# arrays
- array of embedded documents - between [ ]
- arrays can hold ANY data

ex:
> db.passengers.updateOne({name: "Albert Twostone"}, {$set: {hobbies: ["sports", "cooking"]}})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }

> db.passengers.find({name: "Albert Twostone"}).pretty()
{
        "_id" : ObjectId("60d501ed8a734511d0f8661b"),
        "name" : "Albert Twostone",
        "age" : 68,
        "hobbies" : [
                "sports",
                "cooking"
        ]
}

- accessing structured data using . operator
> db.passengers.findOne({name: "Albert Twostone"}).hobbies
[ "sports", "cooking" ]

- or, by using search pattern:
> db.passengers.find({hobbies: "sports"}).pretty()
{
        "_id" : ObjectId("60d501ed8a734511d0f8661b"),
        "name" : "Albert Twostone",
        "age" : 68,
        "hobbies" : [
                "sports",
                "cooking"
        ]
}

- to find all the documents for a particular key in a nested document, use . operator
ex:
{
        "_id" : ObjectId("60ce7a27be69cbf3e6810060"),
        "departureAirport" : "LHR",
        "arrivalAirport" : "TXL",
        "aircraft" : "Airbus A320",
        "distance" : 950,
        "intercontinental" : false,
        "status" : {
                "description" : "on-time",
                "lastUpdated" : "1 hour ago",
                "details" : {
                        "responsible" : "Rishi Srivastava"
                }
        }
}

- if want to find "description" : "on-time", then use . operator; remember to use key inside ""
> db.flightData.find({"status.description": "on-time"}).pretty()


- Drop a database
use <databaseName>
db.dropDatabase()

- Drop a collection
db.<collectionName>.drop()

- delete all data from a collection
db.<collectionName>.deleteMany({})


#############
# Assignment
#############

{
  firstName
  lastName
  age
  history
    [
           { disease,  treatment }
           {  }
        ]
}

- insert 3 patient records
- update patient data of 1 with new age, name and history
- find all patients older than 30
- delete all patients who got a cold

# solution
1) insert 3 patient records
use patients
db.patient.insertOne({firstName: "John", lastName: "Wright", age: 43, history: [{disease: "cold", treatment: "medicines"}, {disease: "headache", treatment: "coconut"}]})
db.patient.insertOne({firstName: "Kenneth", lastName: "Chin", age: 25, history: [{disease: "insomnia", treatment: "sleep"}]})
db.patient.insertOne({firstName: "Suphathorn", lastName: "Ramabutr", age: 41, history: [{disease: "workaholic", treatment: "holidays"}, {disease: "cold", treatment: "panadol"}]})

# could use insertMany()

db.patient.find().pretty()

2) update patient data of 1 with new age, name and history
db.patient.updateOne({firstName: "Kenneth"}, {$set: {firstName: "Garfield", lastName: "Lau", age: 29, history: [{disease: "diabetes", treatment: "insulin"}]}})

3) find all patients older than 30
db.patient.find({age: {$gt: 30}}).pretty()

4) delete all patients who got a cold
db.patient.deleteMany({"history.disease": "cold"})


#############################
# Schemas & Relations
# How to Structure Documents
#############################
- Schema means defining the table structure and type / name of columns it can hold
- MongoDB enforces no schemas => documents dont have to use the same schema inside of one collection
- better design is to have some fields which are always present in all the documents + some extra keys for few documents


#############
# Data Types
#############
- Text - always inside "" - max 16 MB
- Boolean - true / false
- Number - Integer (int32), NumberLong (int64), NumberDecimal
by default its decimal number as JavaScript has default Number
- ObjectId - unique _id
- ISODate - "yyyy-mm-dd"
- Timestamp
- Embedded Document - {"a": { ... }}
- Array - {"b": [ ... ]}

example:
db.companies.insertOne({name: "Fresh Apples Inc", isStartup: true, employees: 33, funding: 12345678901234567890, details: {ceo: "Mark Super"},
tags: [{title: "super"}, {title: "perfect"}], foundingDate: new Date(), insertedAt: new Timestamp()})

- get information about database
> db.stats()
{
        "db" : "companyData",
        "collections" : 2,
        "views" : 0,
        "objects" : 2,
        "avgObjSize" : 134.5,
        "dataSize" : 269,
        "storageSize" : 24576,
        "indexes" : 2,
        "indexSize" : 24576,
        "totalSize" : 49152,
        "scaleFactor" : 1,
        "fsUsedSize" : 489910005760,
        "fsTotalSize" : 499337080832,
        "ok" : 1
}

- can store as 32-bit number instead of default 64-bit float
> db.numbers.insertOne({b: NumberInt(1)})

- to check the type of a key use "typeof"
> typeof db.numbers.findOne().a
number
> typeof db.numbers.findOne().b
undefined









